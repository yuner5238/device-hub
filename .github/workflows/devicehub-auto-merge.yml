name: Update Devices From Issue

on:
  issues:
    types: [opened]

jobs:
  update-device:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Parse issue and update devices.json
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = context.payload.issue.title;
            const issueBody = context.payload.issue.body;
            const issueNumber = context.payload.issue.number;

            if (!issueTitle.startsWith("Update Device ")) {
              console.log("Not a device update issue, skipping.");
              return;
            }

            const deviceId = issueTitle.replace("Update Device ", "").trim();

            let updatedData;
            try {
              updatedData = JSON.parse(issueBody);
            } catch (e) {
              await github.issues.createComment({
                ...context.repo,
                issue_number: issueNumber,
                body: "❌ Issue 内容不是有效的 JSON，请检查格式后重新提交。"
              });
              return;
            }

            const fs = require('fs');
            const path = require('path');

            const devicesPath = path.join(process.cwd(), 'devices.json');
            const devicesContent = fs.readFileSync(devicesPath, 'utf8');
            const devices = JSON.parse(devicesContent);

            const deviceIndex = devices.findIndex(d => d.id === deviceId);
            if (deviceIndex === -1) {
              await github.issues.createComment({
                ...context.repo,
                issue_number: issueNumber,
                body: `❌ 找不到设备 ID: ${deviceId}`
              });
              return;
            }

            // 更新设备数据
            devices[deviceIndex] = {...devices[deviceIndex], ...updatedData};

            // 写回文件
            fs.writeFileSync(devicesPath, JSON.stringify(devices, null, 2), 'utf8');

            // 创建新分支
            const branchName = `devicehub/update-${deviceId}-${Date.now()}`;
            const baseRef = 'refs/heads/main';

            // 获取主分支 SHA
            const { data: refData } = await github.git.getRef({
              ...context.repo,
              ref: baseRef,
            });

            // 创建新分支
            await github.git.createRef({
              ...context.repo,
              ref: `refs/heads/${branchName}`,
              sha: refData.object.sha,
            });

            // 读取文件内容编码base64
            const contentEncoded = Buffer.from(JSON.stringify(devices, null, 2)).toString('base64');

            // 获取文件 SHA
            const { data: fileData } = await github.repos.getContent({
              ...context.repo,
              path: 'devices.json',
              ref: 'main',
            });

            // 更新文件到新分支
            await github.repos.createOrUpdateFileContents({
              ...context.repo,
              path: 'devices.json',
              message: `Update device ${deviceId} via Issue #${issueNumber}`,
              content: contentEncoded,
              branch: branchName,
              sha: fileData.sha,
            });

            // 创建 Pull Request
            const { data: pr } = await github.pulls.create({
              ...context.repo,
              title: `Update device ${deviceId} from Issue #${issueNumber}`,
              head: branchName,
              base: 'main',
              body: `自动更新设备 ${deviceId} 信息，来源 Issue #${issueNumber}`,
            });

            // 评论反馈 PR 地址
            await github.issues.createComment({
              ...context.repo,
              issue_number: issueNumber,
              body: `✅ 已创建自动更新的 Pull Request: #${pr.number} - ${pr.html_url}`,
            });
